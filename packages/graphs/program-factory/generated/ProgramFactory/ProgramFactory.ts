// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProgramContractUpdated extends ethereum.Event {
  get params(): ProgramContractUpdated__Params {
    return new ProgramContractUpdated__Params(this);
  }
}

export class ProgramContractUpdated__Params {
  _event: ProgramContractUpdated;

  constructor(event: ProgramContractUpdated) {
    this._event = event;
  }

  get programContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProgramCreated extends ethereum.Event {
  get params(): ProgramCreated__Params {
    return new ProgramCreated__Params(this);
  }
}

export class ProgramCreated__Params {
  _event: ProgramCreated;

  constructor(event: ProgramCreated) {
    this._event = event;
  }

  get programContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProgramFactory__createInput_metaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class ProgramFactory extends ethereum.SmartContract {
  static bind(address: Address): ProgramFactory {
    return new ProgramFactory("ProgramFactory", address);
  }

  create(
    _metaPtr: ProgramFactory__createInput_metaPtrStruct,
    _programOperators: Array<Address>
  ): Address {
    let result = super.call(
      "create",
      "create((uint256,string),address[]):(address)",
      [
        ethereum.Value.fromTuple(_metaPtr),
        ethereum.Value.fromAddressArray(_programOperators)
      ]
    );

    return result[0].toAddress();
  }

  try_create(
    _metaPtr: ProgramFactory__createInput_metaPtrStruct,
    _programOperators: Array<Address>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "create",
      "create((uint256,string),address[]):(address)",
      [
        ethereum.Value.fromTuple(_metaPtr),
        ethereum.Value.fromAddressArray(_programOperators)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  programContract(): Address {
    let result = super.call(
      "programContract",
      "programContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_programContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "programContract",
      "programContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _metaPtr(): CreateCall_metaPtrStruct {
    return changetype<CreateCall_metaPtrStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _programOperators(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateCall_metaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateProgramContractCall extends ethereum.Call {
  get inputs(): UpdateProgramContractCall__Inputs {
    return new UpdateProgramContractCall__Inputs(this);
  }

  get outputs(): UpdateProgramContractCall__Outputs {
    return new UpdateProgramContractCall__Outputs(this);
  }
}

export class UpdateProgramContractCall__Inputs {
  _call: UpdateProgramContractCall;

  constructor(call: UpdateProgramContractCall) {
    this._call = call;
  }

  get _programContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateProgramContractCall__Outputs {
  _call: UpdateProgramContractCall;

  constructor(call: UpdateProgramContractCall) {
    this._call = call;
  }
}
