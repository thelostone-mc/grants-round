// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProgramList extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProgramList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProgramList must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProgramList", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProgramList | null {
    return changetype<ProgramList | null>(
      store.get("ProgramList", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get program(): Bytes | null {
    let value = this.get("program");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set program(value: Bytes | null) {
    if (!value) {
      this.unset("program");
    } else {
      this.set("program", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Program extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Program entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Program must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Program", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Program | null {
    return changetype<Program | null>(store.get("Program", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get operator(): Array<Bytes> | null {
    let value = this.get("operator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set operator(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get metaPtr(): string | null {
    let value = this.get("metaPtr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metaPtr(value: string | null) {
    if (!value) {
      this.unset("metaPtr");
    } else {
      this.set("metaPtr", Value.fromString(<string>value));
    }
  }
}
